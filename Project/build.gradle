buildscript {
    ext {
        springBootVersion = '1.1.12.RELEASE'
    }
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.2.5.RELEASE")
        classpath("mysql:mysql-connector-java:5.1.36") 
        //For generate PDF
        classpath('org.asciidoctor:asciidoctor-gradle-plugin:1.5.2')
        classpath('org.asciidoctor:asciidoctorj-pdf:1.5.0-alpha.6')
        classpath('io.github.robwin:swagger2markup:0.8.0')
        classpath('io.github.robwin:swagger2markup-gradle-plugin:0.8.0')
    }
}

apply plugin: 'java'
apply plugin: 'eclipse-wtp'
apply plugin: 'idea'
apply plugin: 'spring-boot' 
apply plugin: 'war'
//For generate PDF
apply plugin: 'org.asciidoctor.convert'
apply plugin: 'io.github.robwin.swagger2markup'
//apply plugin: 'jetty'
apply from: 'https://raw.github.com/akhikhl/gretty/master/pluginScripts/gretty.plugin'

mainClassName = "project.ProjectApplication"

springBoot {
    mainClass = "project.ProjectApplication"
}

war {
    baseName = 'project'
    version = '0.0.1-SNAPSHOT'
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
    jcenter()
}

configurations {
    compile.exclude module: "spring-boot-starter-tomcat"
    providedRuntime
}

dependencies {
    compile("org.springframework.boot:spring-boot-starter-data-jpa")
    compile("org.springframework.boot:spring-boot-starter-data-rest")
    compile("org.springframework.boot:spring-boot-starter-jetty")
    compile("io.springfox:springfox-swagger2:2.2.0")
    compile("mysql:mysql-connector-java:5.1.36")
}


eclipse {
    classpath {
         containers.remove('org.eclipse.jdt.launching.JRE_CONTAINER')
         containers 'org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.8'
    }
}

idea {
    module {
        inheritOutputDirs = false
        outputDir = file("$buildDir/classes/main/")
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.6'
}


//For generate PDF

ext {
	jsonInputPath = "http://localhost:8080/swagger.json"
    swaggerOutputDir = file("src/docs/swagger")
    swaggerOutputFile = "swagger.json"
    asciiDocOutputDir = file("src/docs/asciidoc/generated")
}

gretty {
    contextPath = '/'
    integrationTestTask = 'getSwaggerJson'
}

task getSwaggerJson(dependsOn: 'classes', type: JavaExec) {
    main = "project.swagger.SwaggerJson"
    classpath = sourceSets.main.runtimeClasspath
    args = [jsonInputPath,swaggerOutputDir,swaggerOutputFile]
}

/*task getSwaggerJson(dependsOn: 'classes', type: JavaExec) {
Jetty 9.2.10.v20150310
 */
	/*doFirst {
        //appStart.execute()
		*//**//*[jettyRun,jettyRunWar,jettyStop]*.stopPort = 8080
		[jettyRun,jettyRunWar,jettyStop]*.stopKey = 'stopKey'*//**//*
        [jettyRun, jettyRunWar]*.contextPath = '/'
        jettyRun.daemon = true
        jettyRun.execute()
    }
    main = "project.swagger.SwaggerJson"
    classpath = sourceSets.main.runtimeClasspath
    args = [jsonInputPath,swaggerOutputDir,swaggerOutputFile]
   	doLast {
        *//**//*appStop.execute()*//**//*
        jettyStop.execute()
    }
}*/

convertSwagger2markup {
    dependsOn getSwaggerJson
    inputDir swaggerOutputDir
    outputDir asciiDocOutputDir
}

asciidoctor {  
    dependsOn convertSwagger2markup
    sources {
        include 'index.adoc'
    }
    backends = ['pdf']
    attributes = [
            doctype: 'book',
            toc: 'left',
            toclevels: '2',
            numbered: '',
            sectlinks: '',
            sectanchors: '',
            hardbreaks: '',
            generated: asciiDocOutputDir
    ]
}

task generateStaticDocumentation {
	dependsOn asciidoctor
}
