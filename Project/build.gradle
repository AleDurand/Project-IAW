buildscript {
    ext {
        springBootVersion = '1.1.12.RELEASE'
    }
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.2.5.RELEASE")
        classpath("mysql:mysql-connector-java:5.1.36")
        //For generate PDF
        classpath('org.asciidoctor:asciidoctor-gradle-plugin:1.5.2')
        classpath('org.asciidoctor:asciidoctorj-pdf:1.5.0-alpha.9')
    }
}

apply plugin: 'java'
apply plugin: 'eclipse-wtp'
apply plugin: 'idea'
apply plugin: 'spring-boot'
apply plugin: 'war'
//For generate PDF
apply plugin: 'org.asciidoctor.convert'

mainClassName = "project.ProjectApplication"

springBoot {
    mainClass = "project.ProjectApplication"
}

war {
    baseName = 'project'
    version = '0.0.1-SNAPSHOT'
}

test {
    exclude "**/swagger/Swagger2MarkupTest.class"
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
    jcenter()
}

configurations {

}

dependencies {
    compile("org.springframework.boot:spring-boot-starter-data-jpa")
    compile("org.springframework.boot:spring-boot-starter-data-rest")
    compile("io.springfox:springfox-swagger2:2.2.2")
    compile("mysql:mysql-connector-java:5.1.36")
    //For generate pdf
    compile('io.github.robwin:swagger2markup-gradle-plugin:0.8.0')
    //For testing
    testCompile("junit:junit")
    testCompile("org.springframework.boot:spring-boot-starter-test")
}


eclipse {
    classpath {
        containers.remove('org.eclipse.jdt.launching.JRE_CONTAINER')
        containers 'org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.8'
    }
}

idea {
    module {
        inheritOutputDirs = false
        outputDir = file("$buildDir/classes/main/")
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.6'
}

//For generate PDF

ext {
    jsonInputPath = "http://localhost:8080/swagger.json"
    swaggerOutputDir = file("src/docs/swagger")
    swaggerOutputFile = "swagger.json"
    asciiDocOutputDir = file("src/docs/asciidoc/generated")
}

task getSwaggerJson(type: Test) {
    include "**/swagger/Swagger2MarkupTest.class"
}

asciidoctor {
    dependsOn getSwaggerJson
    sources {
        include 'index.adoc'
    }
    backends = ['pdf', 'html5']
    attributes = [
            doctype    : 'book',
            toc        : 'left',
            toclevels  : '2',
            numbered   : '',
            sectlinks  : '',
            sectanchors: '',
            hardbreaks : '',
            generated  : asciiDocOutputDir
    ]
}

task generateStaticDocumentation {
    dependsOn asciidoctor
}
